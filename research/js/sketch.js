let width = 500;
let height = 300;

let data = []

let root;

function getMax(object) {
    return Object.keys(object).filter(x => {
         return object[x] == Math.max.apply(null,
         Object.values(object));
   });
};

function setup () {
    createCanvas (width, height);
    frameRate(30)
    background(0) ;

    root = build_kdtree(data_train);
    // console.log(root);
    // console.log("digraph G {\n" + generate_dot(root) + "}");

    // {
    //     "point": [
    //         0.6753138303756714,
    //         0.6753138303756714,
    //         0.026795366778969765,
    //         0.0,
    //         0.0,
    //         0.0,
    //         0.0,
    //         0.0,
    //         0.283624529838562,
    //         0.5343540906906128,
    //         0.5343540906906128,
    //         0.0,
    //         0.0,
    //         0.0,
    //         0.014720452018082142,
    //         0.13782648742198944,
    //         0.3447432816028595,
    //         0.5343540906906128,
    //         0.3951258659362793,
    //         0.3951258659362793,
    //         0.3951258659362793,
    //         0.33003440499305725,
    //         0.0,
    //         0.029761135578155518,
    //         0.3249954283237457,
    //         0.3951258659362793,
    //         0.3951258659362793,
    //         0.45732128620147705,
    //         0.17022602260112762,
    //         0.19771678745746613,
    //         0.2701037526130676,
    //         0.0,
    //         0.0,
    //         0.14171618223190308,
    //         0.5586458444595337,
    //         0.5586458444595337,
    //         0.5265263915061951,
    //         0.5265263915061951,
    //         0.5265263915061951,
    //         0.04726916179060936,
    //         0.16272759437561035,
    //         0.3178354501724243,
    //         0.17982152104377747,
    //         0.009017877280712128,
    //         0.030005650594830513,
    //         0.36754685640335083,
    //         0.36754685640335083,
    //         0.35015374422073364,
    //         0.32553473114967346,
    //         0.36754685640335083,
    //         0.36754685640335083,
    //         0.36754685640335083,
    //         0.2693437337875366,
    //         0.14052698016166687,
    //         0.30807971954345703,
    //         0.3143423795700073,
    //         0.3870859444141388,
    //         0.3870859444141388,
    //         0.07648581266403198,
    //         0.3870859444141388,
    //         0.3870859444141388,
    //         0.3870859444141388,
    //         0.2176719754934311,
    //         0.0836038887500763,
    //         0.3497329652309418,
    //         0.44116225838661194,
    //         0.44116225838661194,
    //         0.018979331478476524,
    //         0.022172898054122925,
    //         0.44116225838661194,
    //         0.44116225838661194,
    //         0.2948596477508545,
    //         0.012012263759970665,
    //         0.5136661529541016,
    //         0.5136661529541016,
    //         0.1567303091287613,
    //         0.1511010229587555,
    //         0.29744482040405273,
    //         0.5136661529541016,
    //         0.2594177722930908,
    //         0.0,
    //         0.03470595180988312,
    //         0.06329779326915741,
    //         0.4537157714366913,
    //         0.4537157714366913,
    //         0.2067604511976242,
    //         0.27322715520858765,
    //         0.4537157714366913,
    //         0.4290788769721985,
    //         0.2667793333530426,
    //         0.40147143602371216,
    //         0.3198578953742981,
    //         0.1769624501466751,
    //         0.40147143602371216,
    //         0.40147143602371216,
    //         0.22770830988883972,
    //         0.2789609432220459,
    //         0.29660913348197937,
    //         0.40147143602371216,
    //         0.4519990086555481,
    //         0.4519990086555481,
    //         0.24469397962093353,
    //         0.022876493632793427,
    //         0.21471558511257172,
    //         0.4519990086555481,
    //         0.4519990086555481,
    //         0.2668953537940979,
    //         0.023203831166028976,
    //         0.0,
    //         0.1758117824792862,
    //         0.4672919809818268,
    //         0.4672919809818268,
    //         0.4672919809818268,
    //         0.2578012943267822,
    //         0.4672919809818268,
    //         0.15656925737857819,
    //         0.0,
    //         0.006517847999930382,
    //         0.023415571078658104,
    //         0.42121779918670654,
    //         0.49547430872917175,
    //         0.49547430872917175,
    //         0.13631515204906464,
    //         0.49547430872917175,
    //         0.2430136799812317,
    //         0.05398665368556976,
    //         0.12536674737930298,
    //         0.00272735976614058,
    //         0.03165857866406441,
    //         0.5674323439598083,
    //         0.5674323439598083,
    //         0.5674323439598083,
    //         0.011321759782731533,
    //         0.0057582794688642025,
    //         0.1072734072804451,
    //         0.049165528267621994,
    //         0.006810382474213839,
    //         0.0,
    //         0.057049255818128586,
    //         0.6457166075706482,
    //         0.6457166075706482,
    //         0.3905617594718933,
    //         0.036803245544433594,
    //         0.006506807636469603
    //     ],
    //     "label": 5
    // }
    var point = [
            0.6753138303756714,
            0.6753138303756714,
            0.026795366778969765,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.283624529838562,
            0.5343540906906128,
            0.5343540906906128,
            0.0,
            0.0,
            0.0,
            0.014720452018082142,
            0.13782648742198944,
            0.3447432816028595,
            0.5343540906906128,
            0.3951258659362793,
            0.3951258659362793,
            0.3951258659362793,
            0.33003440499305725,
            0.0,
            0.029761135578155518,
            0.3249954283237457,
            0.3951258659362793,
            0.3951258659362793,
            0.45732128620147705,
            0.17022602260112762,
            0.19771678745746613,
            0.2701037526130676,
            0.0,
            0.0,
            0.14171618223190308,
            0.5586458444595337,
            0.5586458444595337,
            0.5265263915061951,
            0.5265263915061951,
            0.5265263915061951,
            0.04726916179060936,
            0.16272759437561035,
            0.3178354501724243,
            0.17982152104377747,
            0.009017877280712128,
            0.030005650594830513,
            0.36754685640335083,
            0.36754685640335083,
            0.35015374422073364,
            0.32553473114967346,
            0.36754685640335083,
            0.36754685640335083,
            0.36754685640335083,
            0.2693437337875366,
            0.14052698016166687,
            0.30807971954345703,
            0.3143423795700073,
            0.3870859444141388,
            0.3870859444141388,
            0.07648581266403198,
            0.3870859444141388,
            0.3870859444141388,
            0.3870859444141388,
            0.2176719754934311,
            0.0836038887500763,
            0.3497329652309418,
            0.44116225838661194,
            0.44116225838661194,
            0.018979331478476524,
            0.022172898054122925,
            0.44116225838661194,
            0.44116225838661194,
            0.2948596477508545,
            0.012012263759970665,
            0.5136661529541016,
            0.5136661529541016,
            0.1567303091287613,
            0.1511010229587555,
            0.29744482040405273,
            0.5136661529541016,
            0.2594177722930908,
            0.0,
            0.03470595180988312,
            0.06329779326915741,
            0.4537157714366913,
            0.4537157714366913,
            0.2067604511976242,
            0.27322715520858765,
            0.4537157714366913,
            0.4290788769721985,
            0.2667793333530426,
            0.40147143602371216,
            0.3198578953742981,
            0.1769624501466751,
            0.40147143602371216,
            0.40147143602371216,
            0.22770830988883972,
            0.2789609432220459,
            0.29660913348197937,
            0.40147143602371216,
            0.4519990086555481,
            0.4519990086555481,
            0.24469397962093353,
            0.022876493632793427,
            0.21471558511257172,
            0.4519990086555481,
            0.4519990086555481,
            0.2668953537940979,
            0.023203831166028976,
            0.0,
            0.1758117824792862,
            0.4672919809818268,
            0.4672919809818268,
            0.4672919809818268,
            0.2578012943267822,
            0.4672919809818268,
            0.15656925737857819,
            0.0,
            0.006517847999930382,
            0.023415571078658104,
            0.42121779918670654,
            0.49547430872917175,
            0.49547430872917175,
            0.13631515204906464,
            0.49547430872917175,
            0.2430136799812317,
            0.05398665368556976,
            0.12536674737930298,
            0.00272735976614058,
            0.03165857866406441,
            0.5674323439598083,
            0.5674323439598083,
            0.5674323439598083,
            0.011321759782731533,
            0.0057582794688642025,
            0.1072734072804451,
            0.049165528267621994,
            0.006810382474213839,
            0.0,
            0.057049255818128586,
            0.6457166075706482,
            0.6457166075706482,
            0.3905617594718933,
            0.036803245544433594,
            0.006506807636469603
        ];
    var digits = kdtree_nearest_neighbor_query(root, point, 10)
    console.log(digits);

    // test with test data

    var counter = 0;
    for(let i = 0 ; i < data_test.length ; i++){
        let results = kdtree_nearest_neighbor_query(root, data_test[i].point, 10)
        let prediction = {0:0, 1:0, 2:0, 3:0, 4:0, 5:0, 6:0, 7:0, 8:0, 9:0};
        for(let i = 0 ; i < results.length ; i++){
            prediction[results[i][2]]++;
        }
        if (getMax(prediction)[0] == data_test[i].label){
            counter++;
        }
    }
    console.log(counter)
    console.log("Acc: ", counter/data_test.length);

}
